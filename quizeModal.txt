import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import Navigation from "../../components/Navigation";
import AssignmentModal from "../../components/modals/AssignmentModal";
import Player from "../../components/player/Player";
import VideoList from "../../components/relativeVideos/VideoList";
import Error from "../../components/ui/errors/Error";
import VideoPlayerLoader from "../../components/ui/loaders/VideoPlayerLoader";
import { selectId } from "../../features/auth/authSelectors";
import {
  useGetPlayerVideoQuery,
  useGetVideoQuery,
} from "../../features/videos/videosApi";

export default function CoursePlayer() {
  const [opened, setOpened] = useState(false);
  const [isVideoId, setIsVideoId] = useState(false);
  const [isIdAvailable, setIdAvailable] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const { videoId } = useParams();

  const userId = useSelector(selectId);
  const { data: videos } = useGetPlayerVideoQuery(undefined, {
    skip: !isVideoId,
  });
  const { data, isLoading, isError, error } = useGetVideoQuery(
    {
      id: videoId,
      userId: userId,
    },
    {
      skip: !isIdAvailable,
    }
  );

  const { video } = data || {};
  console.log(video);

  const controlModal = () => {
    setOpened((prevState) => !prevState);
  };

  useEffect(() => {
    if (videoId) {
      localStorage.setItem("prevPlayedVideo", videoId);
      setIdAvailable(true);
    }
  }, [location, videoId]);

  useEffect(() => {
    if (videoId === undefined) {
      const id = localStorage.getItem("prevPlayedVideo");
      if (id == null) {
        setIsVideoId(true);
        setIdAvailable(false);
      } else {
        setIdAvailable(true);
        setIsVideoId(false);
        navigate(`/courses/${id}`);
      }
    }
  }, [location, videoId, navigate]);

  useEffect(() => {
    if (videos?.length > 0) {
      const video = videos[0];
      if (video?.id) {
        localStorage.setItem("prevPlayedVideo", video.id);
        navigate(`/courses/${video.id}`);
      }
    }
  }, [videos, navigate]);

  // decide what to render

  let content = null;

  if (isLoading) {
    content = <VideoPlayerLoader />;
  } else if (!isLoading && isError) {
    content = <Error bg="error" message={error?.data} />;
  } else if (!isLoading && !isError && !video?.id) {
    content = <Error bg="not-found" message="No video was Found!" />;
  } else if (!isLoading && !isError && video?.id) {
    content = (
      <>
        <Player data={data} control={controlModal} />
      </>
    );
  }

  return (
    <>
      <Navigation />

      <section className="py-6 bg-primary">
        <div className="mx-auto max-w-7xl px-5 lg:px-0">
          <div className="grid grid-cols-3 gap-2 lg:gap-8">
            <div className="col-span-full w-full space-y-8 lg:col-span-2">
              {content}
            </div>
            <VideoList />
          </div>
        </div>
      </section>
      <AssignmentModal open={opened} control={controlModal} />
    </>
  );
}
